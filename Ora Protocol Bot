import os
import tweepy
from web3 import Web3
from dotenv import load_dotenv
import requests

# Load environment variables from .env file
load_dotenv()

# Twitter API credentials
TWITTER_API_KEY = os.getenv('TWITTER_API_KEY')
TWITTER_API_SECRET = os.getenv('TWITTER_API_SECRET')
TWITTER_ACCESS_TOKEN = os.getenv('TWITTER_ACCESS_TOKEN')
TWITTER_ACCESS_SECRET = os.getenv('TWITTER_ACCESS_SECRET')

# Connect to Twitter API
auth = tweepy.OAuthHandler(TWITTER_API_KEY, TWITTER_API_SECRET)
auth.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_SECRET)
api = tweepy.API(auth)

# Connect to Ora Protocol via Web3
ORA_RPC_URL = os.getenv('ORA_RPC_URL')  # Replace with actual Ora Protocol RPC URL
web3 = Web3(Web3.HTTPProvider(ORA_RPC_URL))

if web3.isConnected():
    print("Connected to Ora Protocol blockchain")
else:
    print("Failed to connect to Ora Protocol blockchain")

# Function to search for airdrop keywords on Twitter
def search_airdrops():
    print("Searching for airdrop tweets...")
    tweets = api.search_tweets(q="ora airdrop OR #oraAirdrop OR #airdrop", lang="en", count=10)
    for tweet in tweets:
        print(f"Found airdrop tweet: {tweet.text}")
        # Logic to filter and process relevant airdrops

# Function to claim airdrop by interacting with a smart contract
def claim_airdrop(private_key, contract_address, claim_function):
    account = web3.eth.account.privateKeyToAccount(private_key)
    contract = web3.eth.contract(address=contract_address, abi=claim_function['abi'])
    
    # Prepare the transaction
    tx = contract.functions.claimAirdrop().buildTransaction({
        'from': account.address,
        'nonce': web3.eth.getTransactionCount(account.address),
        'gas': 200000,
        'gasPrice': web3.toWei('20', 'gwei')
    })
    
    # Sign and send the transaction
    signed_tx = web3.eth.account.sign_transaction(tx, private_key)
    tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
    
    print(f"Airdrop claim transaction sent: {tx_hash.hex()}")

# Optional: Function to check Ora Protocol-specific airdrop announcements
def check_ora_announcements():
    print("Checking Ora Protocol announcements for airdrops...")
    response = requests.get('https://ora-protocol-announcements-url.com/airdrop')  # Replace with actual URL
    if response.status_code == 200:
        airdrops = response.json()
        for airdrop in airdrops:
            print(f"Found airdrop: {airdrop['title']} - {airdrop['details']}")

if __name__ == "__main__":
    # Monitor Twitter for airdrop announcements
    search_airdrops()

    # Example: Claim an airdrop (replace with actual private key and contract details)
    # claim_airdrop("<PRIVATE_KEY>", "<CONTRACT_ADDRESS>", <CLAIM_FUNCTION>)

    # Check Ora Protocol-specific announcements
    check_ora_announcements()
