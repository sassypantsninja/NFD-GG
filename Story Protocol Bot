// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StoryProtocolAirdrop {
    // Owner of the contract
    address public owner;
    
    // Amount of tokens to distribute per user
    uint256 public tokenAmount;

    // Deadline for the airdrop participation
    uint256 public deadline;

    // Mapping to track registered users and their task completion status
    mapping(address => bool) public isRegistered;
    mapping(address => bool) public hasCompletedTasks;
    mapping(address => bool) public hasClaimedTokens;
    
    // Array to store eligible users
    address[] public eligibleUsers;

    // ERC20 token interface
    IERC20 public token;

    // Event declarations
    event UserRegistered(address indexed user);
    event TaskCompleted(address indexed user);
    event TokensClaimed(address indexed user, uint256 amount);

    // Modifier to restrict functions to only the owner
    modifier onlyOwner() {
        require(msg.sender == owner, "Not the owner");
        _;
    }

    // Constructor to initialize contract with token address, token amount, and deadline
    constructor(address _tokenAddress, uint256 _tokenAmount, uint256 _durationInDays) {
        owner = msg.sender;
        token = IERC20(_tokenAddress);
        tokenAmount = _tokenAmount;
        deadline = block.timestamp + (_durationInDays * 1 days);
    }

    // Function to register for the airdrop
    function register() external {
        require(block.timestamp < deadline, "Airdrop registration closed");
        require(!isRegistered[msg.sender], "User already registered");

        isRegistered[msg.sender] = true;
        emit UserRegistered(msg.sender);
    }

    // Function to verify task completion (to be called by the owner)
    function verifyTaskCompletion(address _user) external onlyOwner {
        require(isRegistered[_user], "User not registered");
        require(!hasCompletedTasks[_user], "Tasks already completed");

        hasCompletedTasks[_user] = true;
        eligibleUsers.push(_user);
        emit TaskCompleted(_user);
    }

    // Function for users to claim their tokens
    function claimTokens() external {
        require(block.timestamp >= deadline, "Airdrop still ongoing");
        require(isRegistered[msg.sender], "User not registered");
        require(hasCompletedTasks[msg.sender], "Tasks not completed");
        require(!hasClaimedTokens[msg.sender], "Tokens already claimed");

        // Transfer tokens to user
        require(token.transfer(msg.sender, tokenAmount), "Token transfer failed");

        hasClaimedTokens[msg.sender] = true;
        emit TokensClaimed(msg.sender, tokenAmount);
    }

    // Function to withdraw unclaimed tokens by owner after deadline
    function withdrawRemainingTokens() external onlyOwner {
        require(block.timestamp > deadline, "Airdrop not yet ended");

        uint256 remainingTokens = token.balanceOf(address(this));
        require(remainingTokens > 0, "No tokens left to withdraw");

        token.transfer(owner, remainingTokens);
    }
}

// ERC20 Token Interface
interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
}
