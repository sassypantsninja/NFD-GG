from web3 import Web3
import time

# Connect to Ethereum node
infura_url = "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID"
web3 = Web3(Web3.HTTPProvider(infura_url))

# Ensure the connection is successful
if web3.isConnected():
    print("Connected to Ethereum network")
else:
    raise Exception("Unable to connect to Ethereum network")

# User's wallet address and private key (keep this secure!)
wallet_address = "YOUR_WALLET_ADDRESS"
private_key = "YOUR_PRIVATE_KEY"

# Eclipse Protocol contract address and ABI (you'll need the contract ABI)
eclipse_airdrop_contract_address = web3.toChecksumAddress("ECLIPSE_AIRDROP_CONTRACT_ADDRESS")
eclipse_airdrop_abi = [
    # ABI snippet here (you'd need the actual ABI to proceed)
]

# Load the Eclipse Protocol smart contract
contract = web3.eth.contract(address=eclipse_airdrop_contract_address, abi=eclipse_airdrop_abi)

# Function to check eligibility and claim the airdrop
def claim_airdrop():
    nonce = web3.eth.getTransactionCount(wallet_address)
    
    # Build the claim airdrop transaction
    txn = contract.functions.claimAirdrop(wallet_address).buildTransaction({
        'chainId': 1,  # Ethereum mainnet
        'gas': 200000,  # Adjust based on gas estimation
        'gasPrice': web3.toWei('50', 'gwei'),  # Set appropriate gas price
        'nonce': nonce
    })
    
    # Sign the transaction with private key
    signed_txn = web3.eth.account.sign_transaction(txn, private_key=private_key)
    
    # Send the transaction
    txn_hash = web3.eth.sendRawTransaction(signed_txn.rawTransaction)
    print(f"Airdrop claim transaction sent! Txn hash: {txn_hash.hex()}")
    
    # Wait for the transaction receipt
    receipt = web3.eth.waitForTransactionReceipt(txn_hash)
    if receipt.status == 1:
        print("Airdrop claimed successfully!")
    else:
        print("Airdrop claim failed!")

# Function to continuously check eligibility and claim airdrops
def airdrop_hunter_loop():
    while True:
        try:
            # Check if the wallet is eligible for the airdrop (assumes `isEligibleForAirdrop()` exists)
            eligible = contract.functions.isEligibleForAirdrop(wallet_address).call()
            
            if eligible:
                print("Eligible for airdrop, attempting to claim...")
                claim_airdrop()
            else:
                print("Not eligible for airdrop yet, retrying in 10 minutes...")
            
            # Wait 10 minutes before checking again
            time.sleep(600)
        
        except Exception as e:
            print(f"Error occurred: {str(e)}")
            time.sleep(600)  # Retry in 10 minutes after an error

# Start the airdrop hunting bot
airdrop_hunter_loop()
