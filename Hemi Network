// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Interface to interact with an external airdrop contract (assuming it's EVM-compatible)
interface IAirdrop {
    function claimAirdrop(address recipient) external;
}

// Standard ERC20 Interface
interface IERC20 {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
}

contract HemiAirdropFarmer {
    string public name = "Hemi Token";
    string public symbol = "HEMI";
    uint8 public decimals = 18;
    uint256 public totalSupply = 1000000 * (10 ** uint256(decimals));

    address public owner;
    address public botAddress;
    IAirdrop public airdropContract;
    IERC20 public hemiToken;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;
    mapping(address => bool) public hasClaimed;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event AirdropClaimed(address indexed recipient, uint256 value);

    modifier onlyOwner() {
        require(msg.sender == owner, "Not contract owner");
        _;
    }

    modifier onlyBot() {
        require(msg.sender == botAddress, "Not authorized bot");
        _;
    }

    constructor(address _airdropContract, address _hemiTokenAddress) {
        owner = msg.sender;
        airdropContract = IAirdrop(_airdropContract); // Assign external airdrop contract
        hemiToken = IERC20(_hemiTokenAddress); // Assign Hemi token contract

        // Assign all initial tokens to the contract owner
        balanceOf[msg.sender] = totalSupply;
        emit Transfer(address(0), msg.sender, totalSupply);
    }

    // Token Transfer Functions (ERC20 standard)
    function transfer(address to, uint256 value) public returns (bool success) {
        require(balanceOf[msg.sender] >= value, "Insufficient balance");
        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;
        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool success) {
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

    function transferFrom(address from, address to, uint256 value) public returns (bool success) {
        require(value <= balanceOf[from], "Insufficient balance");
        require(value <= allowance[from][msg.sender], "Allowance exceeded");

        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;

        emit Transfer(from, to, value);
        return true;
    }

    // Bot Functionality to Claim Airdrop
    function claimAirdropFor(address recipient) external onlyBot {
        require(!hasClaimed[recipient], "Airdrop already claimed for this address");
        airdropContract.claimAirdrop(recipient); // Call external airdrop contract
        hasClaimed[recipient] = true;

        uint256 claimedAmount = hemiToken.balanceOf(address(this)); // Assuming the airdrop sends tokens to this contract
        hemiToken.transfer(recipient, claimedAmount); // Transfer airdropped tokens to recipient

        emit AirdropClaimed(recipient, claimedAmount);
    }

    // Set the address for the bot that can trigger claims
    function setBotAddress(address _botAddress) external onlyOwner {
        botAddress = _botAddress;
    }

    // Withdraw tokens to the owner
    function withdrawTokens(uint256 amount) external onlyOwner {
        hemiToken.transfer(owner, amount);
    }

    // Fallback to receive tokens
    receive() external payable {}
}
